DS[,4][DS[,4]=="Sunday"]="weekend"
ds=as.data.frame(DS)
levels(ds$weekdays)
ds$weekdays=weekdays(as.Date(ds$date))
Ds=as.matrix(ds)
DS[,4][!DS[,4]=="Sunday"]="weekday"
DS[,4][DS[,4]=="Sunday"]="weekend"
ds=as.data.frame(DS)
rm(list=ls())
A=read.csv("activity.csv")
##Making the hist of totla steps per day
a=A[!is.na(A$steps),]
S=split(a,f=a$date)
steps=lapply(S,function(x) x[,1])
sum=as.data.frame(sapply(steps,sum))
sum$date=as.Date(rownames(sum))
rownames(sum)=NULL
colnames(sum)=c("total_steps_per_day","date")
hist(sum[,1],main="Total Steps Per Day",xlab="Steps Per Day",ylab="Number of Days")
##Mean & Median
Summary=summary(sum$total_steps_per_day)
summary=t(as.matrix(Summary))
summary[,c(3,4)]
## What is the average daily activity pattern?
st=sapply(S,function(x) x[,1])
ST=(do.call(cbind,st))
rowMeans=as.data.frame(rowMeans(ST))
rowMeans$interval=S[[2]]$interval
colnames(rowMeans)[1]="Average_Steps"
rowMeans$time=strptime((sapply(rowMeans$interval,formatC,width=4,flag=0)),format="%H%M")
#rowMeans$time=format(rowMeans$time,"%H:%M")
plot(rowMeans$time,rowMeans$Average_Steps,type="l",main="The Average Number of Steps Across All Days",xlab="Time Interval (24 h)",ylab="Steps taken")
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
rowMeans[which(rowMeans$Average_Steps==max(rowMeans$Average_Steps)),]
## Imputing missing values
### Number of NAs
sum(is.na(A$steps))
###Devise a strategy for filling in all of the missing values in the dataset
##Filling in NA values with the average steps per interval,averaged across all days
I=split(A,f=A$interval)
m=as.matrix(sapply(I,function(x) mean(x[,1],na.rm=T)))
for(i in 1:288){
I[[i]][is.na(I[[i]])]=m[i]
}
##Create a new dataset that is equal to the original dataset but with the missing data filled in
df=do.call(rbind.data.frame,I)
ds=do.call(rbind.data.frame,split(df,f=df$date))
rownames(ds)=NULL
## Make a histogram of the total number of steps taken each day
S=split(ds,f=ds$date)
steps=lapply(S,function(x) x[,1])
sum=as.data.frame(sapply(steps,sum))
sum$date=as.Date(rownames(sum))
rownames(sum)=NULL
colnames(sum)=c("total_steps_per_day","date")
hist(sum[,1],main="Total Steps Per Day",xlab="Steps Per Day",ylab="Number of Days")
## calculating the mean $ median for new data set
Summary=summary(sum$total_steps_per_day)
summary=t(as.matrix(Summary))
summary[,c(3,4)]
##Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
ds$weekdays=weekdays(as.Date(ds$date))
Ds=as.matrix(ds)
DS[,4][!DS[,4]=="Sunday"]="weekday"
DS[,4][DS[,4]=="Sunday"]="weekend"
ds=as.data.frame(DS)
DS[,4][DS[,4]=="Sunday"]="weekend"
head(DS)
Ds=as.matrix(ds)
head(DS)
head(Ds)
ds$weekdays=weekdays(as.Date(ds$date))
DS=as.matrix(ds)
DS[,4][!DS[,4]=="Sunday"]="weekday"
DS[,4][DS[,4]=="Sunday"]="weekend"
ds=as.data.frame(DS)
head(ds)
levels(ds$weekdays)
spds=split(ds,f=ds$weekdays)
length(spds)
head(spds)
head(spds[1])
class(spds[1])
class(spds[[1]])
head(spds[[1]])
head(spds[[2]])
head(spds[[3]])
length(spds[[2]])
nrow(spds[[2]])
nrow(spds[[1]])
ds_1=spds[[1]]
ds_2=spds[[2]]
rowmeans_1=aggregate(as.numeric(ds_1$steps),list(i=ds$interval),mean)
rowmeans_1=aggregate(as.numeric(ds_1$steps),list(i=ds_1$interval),mean)
head(rowmeans_1)
rowmeans_2=aggregate(as.numeric(ds_2$steps),list(i=ds_2$interval),mean)
head(rowmeans_2)
nrow(rowmeans_!)
nrow(rowmeans_1)
nrow(rowmeans_2)
head(ds_1)
nrow(S[[2]]$interval)
weekday$time=strptime((sapply(weekday$i,formatC,width=4,flag=0)),format="%H%M")
ds_weekday=spds[[1]]
ds_weekend=spds[[2]]
weekday=aggregate(as.numeric(ds_weekday$steps),list(i=ds_weekday$interval),mean)
weekend=aggregate(as.numeric(ds_weekend$steps),list(i=ds_weekend$interval),mean)
weekday$time=strptime((sapply(weekday$i,formatC,width=4,flag=0)),format="%H%M")
#rowmeans$time=format(rowmeans$time,"%H:%M")
as.numeric(weekday$i)
weekday$i=as.numeric(weekday$i)
weekday$time=strptime((sapply(weekday$i,formatC,width=4,flag=0)),format="%H%M")
head(weekday)
head(S[[2]])
weekday$i=S[[2]]$interval
head(weekday)
weekday$time=strptime((sapply(weekday$i,formatC,width=4,flag=0)),format="%H%M")
head(weekday)
rep=rep(c("weekday","weekend"),each=288)
head(rep)
nrow(wkkend)
nrow(weekend)
nrow(weekday)
head(cbind(weekday,weekend)
)
head(rbind(weekday,weekend)
)
haed(weekend)
headd(weekend)
head(weekend)
weekend$i=S[[2]]$interval
weekend$time=strptime((sapply(weekend$i,formatC,width=4,flag=0)),format="%H%M")
#rowmeans$time=format(rowmeans$time,"%H:%M")
head(weekend)
head(rbind(weekday,weekend)
)
w=rbind(weekday,weekend)
colnames(w)=c("interval","steps","time")
head(w)
nrow(w)
w$weekdays=rep
head(w)
W=transform(w,weekdays=factor(weekdays))
xyplot(steps~interval|weekdays,data=W,layout=c(1,2))
xyplot(steps~interval|weekdays,data=W,layout=c(1,2),type=l)
xyplot(steps~interval|weekdays,data=W,layout=c(1,2),type="l")
for (i in 1:length(df[, 2])){
if (weekdays(df[i, 2])=="Saturday")
{df$weekend[i]<-'weekend'}
else if ((weekdays(df[i, 2])=="Sunday"))
{df$weekend[i]<-'weekend'}
else {df$weekend[i]<-'weekday'}
}
dfweekend<-ddply(df,~time*weekend,summarise,
date=mode(date),
steps=format(mean(steps), scientific = NA),
interval=max(interval),
time=max(time))
#################
library(lattice)
dfweekend <- transform(dfweekend, weekend = factor(weekend))
x<-dfweekend$interval
y<-dfweekend$steps
z<-dfweekend$weekend
dfweekend$steps<-as.numeric(dfweekend$steps)
xyplot(steps~interval|weekend, data=dfweekend, type='l', layout=c(1, 2))
#xyplot(steps~interval, data=intervalsum2, type='l')
#test<-dfweekend[order(dfweekend$weekend) , ]
#setwd('/Users/shahabedinhassani/Downloads')
activity<-read.csv("activity.csv")
################3
library(plyr)
activity$date<-as.Date(activity$date)
actsum<-ddply(activity, "date", summarize,
steps=sum(steps),
interval=sum(interval))
act2<-activity[complete.cases(activity),]
act2$time<-strptime((sapply(act2$interval, formatC, width = 4, flag = 0)), format = "%H%M")
act2$time <- format(act2$time,"%H:%M")
actsum2<-ddply(act2, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
intervalsum2<-ddply(act2, "time", summarize,
date=mode(date),
steps=mean(steps),
interval=max(interval))
##############
library(ggplot2)
qplot(steps, data=actsum2, main='Histogram for Number of Steps per Day', binwidth=1000)
##############
mean(actsum2$steps)
median(actsum2$steps)
###########
qqq<-intervalsum2$time
aaa<-intervalsum2$interval
a1<-aaa[seq(1,length(aaa),30)]
q1<-qqq[seq(1,length(qqq),30)]
ggplot(data = intervalsum2, aes(interval, steps )) + geom_line() + scale_x_continuous(breaks=a1, labels=q1) + ylab("Average Steps Per 5-Minute Interval") + xlab("Time Interval")
#####################
maxint<-intervalsum2$interval[which(intervalsum2$steps == max(intervalsum2$steps))]
maxtime<-intervalsum2$time[which(intervalsum2$steps == max(intervalsum2$steps))]
###############
x<-(is.na(activity$steps))
numna<-sum(x)
############
stepmeans<-ddply(act2,~interval,summarise,mean=mean(steps))
interval<-stepmeans$interval
#datemeans<-ddply(activity,~date,summarise,mean=mean(steps))
df<-activity
for (i in 1:length(df[, 1])){
if (is.na(df[i,1]))
{df[i,1]<-stepmeans[which(interval==df[i,3]), 2]}
else if (is.na(df[i,1])==FALSE)
{df[i,1]<-df[i,1]}
}
###################
df$time<-strptime((sapply(df$interval, formatC, width = 4, flag = 0)), format = "%H%M")
df$time <- format(df$time,"%H:%M")
dfsum2<-ddply(df, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
qplot(steps, data=dfsum2, main='Histogram Using Imputed Values', binwidth=1000)
oldmean<-mean(actsum2$steps)
oldmedian<-median(actsum2$steps)
impmean<-mean(dfsum2$steps)
impmedian<-median(dfsum2$steps)
###################
for (i in 1:length(df[, 2])){
if (weekdays(df[i, 2])=="Saturday")
{df$weekend[i]<-'weekend'}
else if ((weekdays(df[i, 2])=="Sunday"))
{df$weekend[i]<-'weekend'}
else {df$weekend[i]<-'weekday'}
}
dfweekend<-ddply(df,~time*weekend,summarise,
date=mode(date),
steps=format(mean(steps), scientific = NA),
interval=max(interval),
time=max(time))
#################
library(lattice)
dfweekend <- transform(dfweekend, weekend = factor(weekend))
x<-dfweekend$interval
y<-dfweekend$steps
z<-dfweekend$weekend
dfweekend$steps<-as.numeric(dfweekend$steps)
xyplot(steps~interval|weekend, data=dfweekend, type='l', layout=c(1, 2))
#xyplot(steps~interval, data=intervalsum2, type='l')
#test<-dfweekend[order(dfweekend$weekend) , ]
##Reading the data
unzip("./repdata_data_activity.zip")
A=read.csv("activity.csv")
##Making the hist of totla steps per day
a=A[!is.na(A$steps),]
S=split(a,f=a$date)
steps=lapply(S,function(x) x[,1])
sum=as.data.frame(sapply(steps,sum))
sum$date=as.Date(rownames(sum))
rownames(sum)=NULL
colnames(sum)=c("total_steps_per_day","date")
hist(sum[,1],main="Total Steps Per Day",xlab="Steps Per Day",ylab="Number of Days")
##Mean & Median
Summary=summary(sum$total_steps_per_day)
summary=t(as.matrix(Summary))
summary[,c(3,4)]
## What is the average daily activity pattern?
st=sapply(S,function(x) x[,1])
ST=(do.call(cbind,st))
rowMeans=as.data.frame(rowMeans(ST))
rowMeans$interval=S[[2]]$interval
colnames(rowMeans)[1]="Average_Steps"
rowMeans$time=strptime((sapply(rowMeans$interval,formatC,width=4,flag=0)),format="%H%M")
#rowMeans$time=format(rowMeans$time,"%H:%M")
plot(rowMeans$time,rowMeans$Average_Steps,type="l",main="The Average Number of Steps Across All Days",xlab="Time Interval (24 h)",ylab="Steps taken")
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
rowMeans[which(rowMeans$Average_Steps==max(rowMeans$Average_Steps)),]
## Imputing missing values
### Number of NAs
sum(is.na(A$steps))
###Devise a strategy for filling in all of the missing values in the dataset
##Filling in NA values with the average steps per interval,averaged across all days
I=split(A,f=A$interval)
m=as.matrix(sapply(I,function(x) mean(x[,1],na.rm=T)))
for(i in 1:288){
I[[i]][is.na(I[[i]])]=m[i]
}
##Create a new dataset that is equal to the original dataset but with the missing data filled in
df=do.call(rbind.data.frame,I)
ds=do.call(rbind.data.frame,split(df,f=df$date))
rownames(ds)=NULL
## Make a histogram of the total number of steps taken each day
S=split(ds,f=ds$date)
steps=lapply(S,function(x) x[,1])
sum=as.data.frame(sapply(steps,sum))
sum$date=as.Date(rownames(sum))
rownames(sum)=NULL
colnames(sum)=c("total_steps_per_day","date")
hist(sum[,1],main="Total Steps Per Day",xlab="Steps Per Day",ylab="Number of Days")
## calculating the mean $ median for new data set
Summary=summary(sum$total_steps_per_day)
summary=t(as.matrix(Summary))
summary[,c(3,4)]
##Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
ds$weekdays=weekdays(as.Date(ds$date))
DS=as.matrix(ds)
DS[,4][!DS[,4]=="Sunday"]="weekday"
DS[,4][DS[,4]=="Sunday"]="weekend"
ds=as.data.frame(DS)
## Final Plot
spds=split(ds,f=ds$weekdays)
ds_weekday=spds[[1]]
ds_weekend=spds[[2]]
weekday=aggregate(as.numeric(ds_weekday$steps),list(i=ds_weekday$interval),mean)
weekday$i=S[[2]]$interval
weekend=aggregate(as.numeric(ds_weekend$steps),list(i=ds_weekend$interval),mean)
weekend$i=S[[2]]$interval
weekend$time=strptime((sapply(weekend$i,formatC,width=4,flag=0)),format="%H%M")
#rowmeans$time=format(rowmeans$time,"%H:%M")
rep=rep(c("weekday","weekend"),each=288)
w=rbind(weekday,weekend)
colnames(w)=c("interval","steps","time")
w$weekdays=rep
W=transform(w,weekdays=factor(weekdays))
W=transform(w,weekdays=factor(weekdays))
xyplot(steps~interval|weekdays,data=W,layout=c(1,2),type="l")
haed(weekday)
head(weekday)
spds=split(ds,f=ds$weekdays)
ds_weekday=spds[[1]]
ds_weekend=spds[[2]]
weekday=aggregate(as.numeric(ds_weekday$steps),list(i=ds_weekday$interval),mean)
weekday$i=S[[2]]$interval
weekend=aggregate(as.numeric(ds_weekend$steps),list(i=ds_weekend$interval),mean)
weekend$i=S[[2]]$interval
rep=rep(c("weekday","weekend"),each=288)
w=rbind(weekday,weekend)
colnames(w)=c("interval","steps","time")
w$weekdays=rep
W=transform(w,weekdays=factor(weekdays))
W=transform(w,weekdays=factor(weekdays))
xyplot(steps~interval|weekdays,data=W,layout=c(1,2),type="l")
spds=split(ds,f=ds$weekdays)
ds_weekday=spds[[1]]
ds_weekend=spds[[2]]
weekday=aggregate(as.numeric(ds_weekday$steps),list(i=ds_weekday$interval),mean)
weekday$i=S[[2]]$interval
weekend=aggregate(as.numeric(ds_weekend$steps),list(i=ds_weekend$interval),mean)
weekend$i=S[[2]]$interval
rep=rep(c("weekday","weekend"),each=288)
w=rbind(weekday,weekend)
colnames(w)=c("interval","steps")
w$weekdays=rep
W=transform(w,weekdays=factor(weekdays))
W=transform(w,weekdays=factor(weekdays))
xyplot(steps~interval|weekdays,data=W,layout=c(1,2),type="l")
#setwd('/Users/shahabedinhassani/Downloads')
activity<-read.csv("activity.csv")
################3
library(plyr)
activity$date<-as.Date(activity$date)
actsum<-ddply(activity, "date", summarize,
steps=sum(steps),
interval=sum(interval))
act2<-activity[complete.cases(activity),]
act2$time<-strptime((sapply(act2$interval, formatC, width = 4, flag = 0)), format = "%H%M")
act2$time <- format(act2$time,"%H:%M")
actsum2<-ddply(act2, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
intervalsum2<-ddply(act2, "time", summarize,
date=mode(date),
steps=mean(steps),
interval=max(interval))
##############
library(ggplot2)
qplot(steps, data=actsum2, main='Histogram for Number of Steps per Day', binwidth=1000)
##############
mean(actsum2$steps)
median(actsum2$steps)
###########
qqq<-intervalsum2$time
aaa<-intervalsum2$interval
a1<-aaa[seq(1,length(aaa),30)]
q1<-qqq[seq(1,length(qqq),30)]
ggplot(data = intervalsum2, aes(interval, steps )) + geom_line() + scale_x_continuous(breaks=a1, labels=q1) + ylab("Average Steps Per 5-Minute Interval") + xlab("Time Interval")
#####################
maxint<-intervalsum2$interval[which(intervalsum2$steps == max(intervalsum2$steps))]
maxtime<-intervalsum2$time[which(intervalsum2$steps == max(intervalsum2$steps))]
###############
x<-(is.na(activity$steps))
numna<-sum(x)
############
stepmeans<-ddply(act2,~interval,summarise,mean=mean(steps))
interval<-stepmeans$interval
#datemeans<-ddply(activity,~date,summarise,mean=mean(steps))
df<-activity
for (i in 1:length(df[, 1])){
if (is.na(df[i,1]))
{df[i,1]<-stepmeans[which(interval==df[i,3]), 2]}
else if (is.na(df[i,1])==FALSE)
{df[i,1]<-df[i,1]}
}
###################
df$time<-strptime((sapply(df$interval, formatC, width = 4, flag = 0)), format = "%H%M")
df$time <- format(df$time,"%H:%M")
dfsum2<-ddply(df, "date", summarize,
steps=sum(steps),
interval=sum(interval),
time=max(time))
qplot(steps, data=dfsum2, main='Histogram Using Imputed Values', binwidth=1000)
oldmean<-mean(actsum2$steps)
oldmedian<-median(actsum2$steps)
impmean<-mean(dfsum2$steps)
impmedian<-median(dfsum2$steps)
###################
for (i in 1:length(df[, 2])){
if (weekdays(df[i, 2])=="Saturday")
{df$weekend[i]<-'weekend'}
else if ((weekdays(df[i, 2])=="Sunday"))
{df$weekend[i]<-'weekend'}
else {df$weekend[i]<-'weekday'}
}
dfweekend<-ddply(df,~time*weekend,summarise,
date=mode(date),
steps=format(mean(steps), scientific = NA),
interval=max(interval),
time=max(time))
#################
library(lattice)
dfweekend <- transform(dfweekend, weekend = factor(weekend))
x<-dfweekend$interval
y<-dfweekend$steps
z<-dfweekend$weekend
dfweekend$steps<-as.numeric(dfweekend$steps)
xyplot(steps~interval|weekend, data=dfweekend, type='l', layout=c(1, 2))
#xyplot(steps~interval, data=intervalsum2, type='l')
#test<-dfweekend[order(dfweekend$weekend) , ]
A=read.csv("activity.csv")
##Making the hist of totla steps per day
a=A[!is.na(A$steps),]
S=split(a,f=a$date)
steps=lapply(S,function(x) x[,1])
sum=as.data.frame(sapply(steps,sum))
sum$date=as.Date(rownames(sum))
rownames(sum)=NULL
colnames(sum)=c("total_steps_per_day","date")
hist(sum[,1],main="Total Steps Per Day",xlab="Steps Per Day",ylab="Number of Days")
##Mean & Median
Summary=summary(sum$total_steps_per_day)
summary=t(as.matrix(Summary))
summary[,c(3,4)]
## What is the average daily activity pattern?
st=sapply(S,function(x) x[,1])
ST=(do.call(cbind,st))
rowMeans=as.data.frame(rowMeans(ST))
rowMeans$interval=S[[2]]$interval
colnames(rowMeans)[1]="Average_Steps"
rowMeans$time=strptime((sapply(rowMeans$interval,formatC,width=4,flag=0)),format="%H%M")
#rowMeans$time=format(rowMeans$time,"%H:%M")
plot(rowMeans$time,rowMeans$Average_Steps,type="l",main="The Average Number of Steps Across All Days",xlab="Time Interval (24 h)",ylab="Steps taken")
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
rowMeans[which(rowMeans$Average_Steps==max(rowMeans$Average_Steps)),]
## Imputing missing values
### Number of NAs
sum(is.na(A$steps))
###Devise a strategy for filling in all of the missing values in the dataset
##Filling in NA values with the average steps per interval,averaged across all days
I=split(A,f=A$interval)
m=as.matrix(sapply(I,function(x) mean(x[,1],na.rm=T)))
for(i in 1:288){
I[[i]][is.na(I[[i]])]=m[i]
}
##Create a new dataset that is equal to the original dataset but with the missing data filled in
df=do.call(rbind.data.frame,I)
ds=do.call(rbind.data.frame,split(df,f=df$date))
rownames(ds)=NULL
## Make a histogram of the total number of steps taken each day
S=split(ds,f=ds$date)
steps=lapply(S,function(x) x[,1])
sum=as.data.frame(sapply(steps,sum))
sum$date=as.Date(rownames(sum))
rownames(sum)=NULL
colnames(sum)=c("total_steps_per_day","date")
hist(sum[,1],main="Total Steps Per Day",xlab="Steps Per Day",ylab="Number of Days")
## calculating the mean $ median for new data set
Summary=summary(sum$total_steps_per_day)
summary=t(as.matrix(Summary))
summary[,c(3,4)]
##Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
ds$weekdays=weekdays(as.Date(ds$date))
DS=as.matrix(ds)
DS[,4][!DS[,4]=="Sunday"]="weekday"
DS[,4][DS[,4]=="Sunday"]="weekend"
ds=as.data.frame(DS)
## Final Plot
spds=split(ds,f=ds$weekdays)
ds_weekday=spds[[1]]
ds_weekend=spds[[2]]
weekday=aggregate(as.numeric(ds_weekday$steps),list(i=ds_weekday$interval),mean)
weekday$i=S[[2]]$interval
weekend=aggregate(as.numeric(ds_weekend$steps),list(i=ds_weekend$interval),mean)
weekend$i=S[[2]]$interval
rep=rep(c("weekday","weekend"),each=288)
w=rbind(weekday,weekend)
colnames(w)=c("interval","steps")
w$weekdays=rep
W=transform(w,weekdays=factor(weekdays))
W=transform(w,weekdays=factor(weekdays))
xyplot(steps~interval|weekdays,data=W,layout=c(1,2),type="l")
